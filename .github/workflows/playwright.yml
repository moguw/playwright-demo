name: Playwright KAWO Project Tests
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'choose one of environments to test'
        required: true
        default: 'staging-app'
        type: choice
        options:
        - staging-app
        - staging-delta
        - staging-gamma
        - staging-beta
jobs:
  test:
    name: Run end-to-end tests
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: 'npm'
    - name: Install dependencies
      run: npm ci
    - name: Install allure report
      run: npm i -D @playwright/test allure-playwright
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    - name: Install dotenv 
      run: npm i -D dotenv
    - name: Install report 
      run: npm install playwright-json-summary-reporter --save-dev
    - name: Run Playwright tests - workflow_dispatch
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: ALLURE_RESULTS_DIR=my-allure-results 
            test_env=${{ inputs.environment }} 
            org_owner_pwd=${{ secrets.org_owner_pwd }} 
            group_owner_pwd=${{ secrets.group_owner_pwd }} 
            brand_owner_pwd=${{ secrets.brand_owner_pwd }} 
            operator_pwd=${{ secrets.operator_pwd }} 
            npx playwright test 
    - name: Run Playwright tests - push/pull_request
      if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
      run: ALLURE_RESULTS_DIR=my-allure-results 
            test_env=${{ secrets.ENVIRONMENT }} 
            org_owner_pwd=${{ secrets.org_owner_pwd }} 
            group_owner_pwd=${{ secrets.group_owner_pwd }} 
            brand_owner_pwd=${{ secrets.brand_owner_pwd }} 
            operator_pwd=${{ secrets.operator_pwd }} 
            npx playwright test 
    - name: Get Allure history # Step to retrieve Allure history
      uses: actions/checkout@v4
      if: always() # Execute even if previous steps fail
      continue-on-error: true # Continue execution even if the step fails
      with:
        ref: allure_report # Specify the branch to retrieve Allure history from
        path: allure_report # Set the destination path for Allure history
    - name: Generate allure report action # Step to generate Allure report
      uses: simple-elf/allure-report-action@master
      if: always() # Execute even if previous steps fail
      id: allure-report
      with:
        allure_results: my-allure-results # path to store the allure results
        gh_pages: allure_report
        allure_report: allure-report
        allure_history: allure-history # Specify the directory to store Allure history
        keep_reports: 20 # Specify the number of previous reports to keep
    - name: Deploy Allure report to GitHub Pages # Step to deploy Allure report to GitHub Pages
      if: always() # Execute even if previous steps fail
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }} # Provide the GitHub token for authentication
        publish_branch: allure_report # Specify the branch to publish the report to
        publish_dir: allure-history # Specify the directory containing the report
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 7
    - name: Read Summary Report to Get Test Results
      if: always()
      run: |
        STATUS=$(cat ./summary.json | jq -r '.status')
        echo "STATUS=$STATUS" >> $GITHUB_ENV 
        PASSED=$(cat ./summary.json | jq -r '.passed[]' | tr '\n' ' ')
        echo "PASSED=$PASSED" >> $GITHUB_ENV 
        FLAKEY=$(cat ./summary.json | jq -r '.flakey[]' | tr '\n' ' ')
        echo "FLAKEY=$FLAKEY" >> $GITHUB_ENV
        TIMEOUT=$(cat ./summary.json | jq -r '.timedOut[]' | tr '\n' ' ' | sed 's/ /--->TIMEOUT /g') 
        FAILURES=$(cat ./summary.json | jq -r '.failed[]' | tr '\n' ' ')
        FAILURES+=$TIMEOUT
        echo "FAILURES=$FAILURES" >> $GITHUB_ENV
    - name: Send Slack Notification
      if: always()
      uses: 8398a7/action-slack@v3
      env:
        FAILURES: ${{ env.FAILURES }}
        PASSED: ${{ env.PASSED }}
        FLAKEY: ${{ env.FLAKEY }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        job_name: Run end-to-end tests
        status: custom
        fields: repo,eventName,workflow,job,took
        custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : 'danger',
                title: `KAWO Project Playwright UI Automation Test Results 🎭`,
                fields: [{
                  title: '📦 Environment:',
                  value: '${{ inputs.environment }}',
                  short: true
                },
                {
                  title: '🖥️ Triggered By:',
                  value: [{'origin': 'pull_request', 'new': 'Pull Request'}, {'origin': 'schedule', 'new': 'Schedule'}, {'origin': 'repository_dispatch', 'new': 'Deploy'}, {'origin': 'workflow_dispatch', 'new': 'GitHub Actions'}].find(item => item.origin === `${process.env.AS_EVENT_NAME}`).new || `${process.env.AS_EVENT_NAME}`,
                  short: true
                },
                {
                  title: '⏰ Execution Time:',
                  value: `${process.env.AS_TOOK}`,
                  short: true
                },
                {
                  title: '🌟 Total Case:', 
                  value: (`${{ env.FAILURES }}`.match(/.spec.ts/g) || []).length + (`${{ env.PASSED }}`.match(/.spec.ts/g) || []).length - (`${{ env.FLAKEY }}`.match(/.spec.ts/g) || []).length + (`${{ env.PASSED }}`.match(/.setup.ts/g) || []).length,
                  short: true
                },
                {
                  title: '🐛 Workflow:',
                  value: `${process.env.AS_WORKFLOW}`,
                  short: false
                },
                {
                  title: '📰 Allure Report:', 
                  value: `https://mailmangroup.github.io/playwright-testing-kawo-project/${{ github.run_number }}/index.html`,
                  short: false
                },
                {
                  title: '❌ FAILURES:',
                  value: `${{ env.FAILURES }}` === '' ? 'No failures' : `${{ env.FAILURES }}`.match(/.spec.ts/g).length > 30 ? `Too many failures to print. Please go to GitHub to see full list of failures` : '```${{ env.FAILURES }}```'.replace(/ /g, '\n'),
                  short: false
                }],
                "footer": "KAWO",
                "footer_icon": "https://img.kawo.com/05cac780-4eec-406a-b091-92fad995d8e0_m.png"
              }]
            }